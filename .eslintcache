[{"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\index.js":"1","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\App.js":"2","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\context\\context.js":"3","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\context\\contextReducer.js":"4","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\styles.js":"5","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Microphone.jsx":"6","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Main\\Main.jsx":"7","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Details\\Details.jsx":"8","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Main\\styles.js":"9","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Details\\styles.js":"10","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\useTransactions.js":"11","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\List\\List.jsx":"12","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Form\\Form.jsx":"13","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\constants\\categories.js":"14","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\utils\\formatDate.js":"15","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Snackbar\\Snackbar.jsx":"16","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Snackbar\\styles.js":"17","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Form\\styles.js":"18","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\List\\styles.js":"19"},{"size":443,"mtime":1612139733871,"results":"20","hashOfConfig":"21"},{"size":1908,"mtime":1613172793001,"results":"22","hashOfConfig":"21"},{"size":1619,"mtime":1612161974279,"results":"23","hashOfConfig":"21"},{"size":758,"mtime":1612157143273,"results":"24","hashOfConfig":"21"},{"size":586,"mtime":1612328954389,"results":"25","hashOfConfig":"21"},{"size":331,"mtime":1612338584026,"results":"26","hashOfConfig":"21"},{"size":1954,"mtime":1613168386919,"results":"27","hashOfConfig":"21"},{"size":799,"mtime":1613168164101,"results":"28","hashOfConfig":"21"},{"size":596,"mtime":1612326945018,"results":"29","hashOfConfig":"21"},{"size":258,"mtime":1611790394911,"results":"30","hashOfConfig":"21"},{"size":1547,"mtime":1611981392177,"results":"31","hashOfConfig":"21"},{"size":1617,"mtime":1611894168224,"results":"32","hashOfConfig":"21"},{"size":5339,"mtime":1612327105194,"results":"33","hashOfConfig":"21"},{"size":1691,"mtime":1611895511953,"results":"34","hashOfConfig":"21"},{"size":358,"mtime":1611977909243,"results":"35","hashOfConfig":"21"},{"size":931,"mtime":1612325781298,"results":"36","hashOfConfig":"21"},{"size":204,"mtime":1612316171268,"results":"37","hashOfConfig":"21"},{"size":245,"mtime":1611792999818,"results":"38","hashOfConfig":"21"},{"size":414,"mtime":1611801435024,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1t5oahe",{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\index.js",[],["84","85"],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\App.js",["86","87","88","89","90"],"import React, { useContext, useEffect, useRef} from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport { useSpeechContext, SpeechState } from '@speechly/react-client'\r\nimport { PushToTalkButtonContainer, PushToTalkButton, ErrorPanel} from '@speechly/react-ui'\r\n\r\nimport Main from './components/Main/Main'\r\nimport Details from './components/Details/Details'\r\nimport useStyles from './styles'\r\nimport { ExpenseTrackerContext } from './context/context'\r\nimport Microphone from './components/Microphone'\r\n\r\nconst App = () => {\r\n    const classes = useStyles();\r\n    const { speechState } = useSpeechContext();\r\n    const main = useRef(null);\r\n    const executeScroll = () => main.current.scrollIntoView({\r\n        behavior: \"smooth\"\r\n      });\r\n\r\n    useEffect(() => {\r\n        if(speechState === SpeechState.Recording)\r\n            executeScroll();\r\n\r\n    }, [speechState]);\r\n\r\n    return (\r\n        <div style={{verticalAlign: 'center'}}>\r\n            <Grid container className={classes.grid}  spacing={0} alignItems=\"center\" justify=\"center\"  style={{height: '100vh'}}>\r\n                <Grid item xs={12} sm={4} className={classes.hideOnMobile}>\r\n                    <Details title='Income' />\r\n                </Grid>\r\n                <Grid ref={main} item xs={12} sm={3} className={classes.main}>\r\n                    <Main />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} className={classes.desktop}>\r\n                    <Details title='Income' />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} className={classes.last}>\r\n                    <Details title=\"Expense\" />\r\n                </Grid>\r\n            </Grid>\r\n            {/* <PushToTalkButtonContainer>\r\n                <PushToTalkButton />\r\n                <ErrorPanel />\r\n            </PushToTalkButtonContainer> */}\r\n            <Microphone />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\context\\context.js",[],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\context\\contextReducer.js",[],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\styles.js",[],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Microphone.jsx",[],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Main\\Main.jsx",["91","92","93"],"import React, { useContext } from 'react'\r\nimport { Card, CardHeader, CardContent, Typography, Grid, Divider } from '@material-ui/core'\r\nimport { useSpeechContext } from '@speechly/react-client'\r\n\r\nimport { ExpenseTrackerContext } from '../../context/context'\r\nimport Form from '../Form/Form'\r\nimport List from '../List/List'\r\nimport useStyles from './styles'\r\n\r\nconst Main = () => {\r\nconst classes = useStyles();\r\nconst { speechState, segment, toggleRecording } = useSpeechContext();\r\nconst { balance }  = useContext(ExpenseTrackerContext);\r\n\r\n    return (\r\n        <>\r\n        <Card className={classes.root}>\r\n                <CardHeader title=\"Expense Tracker\" subheader=\"with voice input support\" />\r\n                <CardContent>\r\n                    <Typography align=\"center\" variant=\"h5\" className={balance >= 0 ? classes.surplus : classes.deficit} >Total Balance: ${balance}</Typography>\r\n                    <Typography variant=\"subtitle1\" style={{lineHeight: '1.5em', marginTop: '20px' }}>\r\n                        <b>Try saying:</b> <br/>Add income for $100 in category salary for next Monday\r\n                    </Typography>\r\n                    <Divider className={classes.divider}/>\r\n                    <Form />\r\n                </CardContent>\r\n                <CardContent className={classes.CardContent}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <List />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n           \r\n\r\n            {/* <div className=\"status\">{speechState}</div>\r\n      {segment ? (\r\n        <div className=\"segment\">\r\n          {segment.words.map((w) => w.value).join(\" \")}\r\n        </div>\r\n      ) : null}\r\n      <div className=\"mic-button\">\r\n        <button onClick={toggleRecording}>Record</button>\r\n      </div> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Details\\Details.jsx",[],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Main\\styles.js",[],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Details\\styles.js",[],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\useTransactions.js",[],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\List\\List.jsx",["94"],"import React, { useContext } from 'react'\r\nimport { List as MUIList, ListItem, ListItemAvatar, ListItemText, Avatar, ListItemSecondaryAction, IconButton, Slide, Icon} from '@material-ui/core'\r\nimport {Delete, MoneyOff } from '@material-ui/icons'\r\n\r\nimport { ExpenseTrackerContext } from '../../context/context'\r\nimport useStyles from './styles'\r\n\r\nconst List = () => {\r\n    const classes = useStyles();\r\n\r\n    const { deleteTransaction, transactions } = useContext(ExpenseTrackerContext);\r\n\r\n    \r\n\r\n    return (\r\n        <MUIList dense={false} className={classes.list}>\r\n            {transactions.map(transaction => (\r\n                <Slide direction=\"down\" in  mountOnEnter unmountOnExit key={transaction.id}>\r\n                    <ListItem>\r\n                        <ListItemAvatar>\r\n                            <Avatar className={transaction.type === 'Income' ? classes.avatarIncome : classes.avatarExpense}>\r\n                                <MoneyOff />\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText primary={transaction.category} secondary={`$${transaction.amount} - ${transaction.date}`}/>\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => deleteTransaction(transaction.id)} >\r\n                                <Delete />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                </Slide>\r\n            ))}\r\n        </MUIList>\r\n    )\r\n}\r\n\r\nexport default List\r\n","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Form\\Form.jsx",["95","96"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem, Menu } from '@material-ui/core'\r\nimport { v4 as  uuidv4} from 'uuid'\r\nimport { useSpeechContext } from '@speechly/react-client'\r\n\r\nimport useStyles from './styles'\r\nimport { ExpenseTrackerContext } from '../../context/context'\r\nimport { incomeCategories, expenseCategories } from '../../constants/categories'\r\nimport formatDate from '../../utils/formatDate'\r\nimport CustomSnackbar from '../Snackbar/Snackbar'\r\n\r\nconst intialState = {\r\n    amount: '',\r\n    category: '',\r\n    type: 'Income',\r\n    date: formatDate(new Date())\r\n}\r\n\r\nconst Form = () => {\r\n    const classes = useStyles();\r\n    const [formData, setFormData] = useState(intialState);\r\n    const [open, setOpen] = useState(false);\r\n    const {addTransaction} = useContext(ExpenseTrackerContext);\r\n    const categoryExpenses = formData.type === 'Income' ? incomeCategories : expenseCategories;\r\n    const { segment } = useSpeechContext();\r\n    useEffect(() => {\r\n        if(segment)\r\n        {\r\n            if(segment.intent.intent === 'add_income')\r\n                setFormData({...formData, type: 'Income'});\r\n            else if(segment.intent.intent === 'add_expense')\r\n                setFormData({...formData, type: 'Expense'})\r\n            else if(segment.isFinal && segment.intent.intent === 'create_transaction')\r\n                return createTransaction();\r\n            else if(segment.isFinal && segment.intent.intent === 'cancel_transaction')\r\n                return setFormData(intialState);\r\n\r\n            console.log(segment.intent.intent);\r\n\r\n            segment.entities.forEach(e => {\r\n                switch(e.type)\r\n                {\r\n                    case 'category':\r\n                        const category = e.value[0] + e.value.substring(1).toLowerCase();\r\n                        console.log(category);\r\n                        if(incomeCategories.map(c => c.type).includes(category)){\r\n                            setFormData({...formData, type: 'Income', category})\r\n                        }\r\n                        else if(expenseCategories.map(c => c.type).includes(category)){\r\n                            setFormData({...formData, type: 'Expense', category})\r\n                        }\r\n                        \r\n                    break;\r\n                    case 'amount':\r\n                        setFormData({...formData, amount: e.value})\r\n                    break;\r\n                    case 'date':\r\n                        setFormData({...formData, date: formatDate(e.value)})\r\n                    break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n\r\n            //if all formdate presetn create transaction\r\n            if(segment.isFinal && formData.amount && formData.category && formData.type && formData.date)\r\n                createTransaction();\r\n        }\r\n    }, [segment]);\r\n\r\n    const createTransaction = () => {\r\n    //validation\r\n        if(!formData.amount.trim() || !formData.category) return;\r\n\r\n        if(Number.isNaN(Number(formData.amount) || !formData.date.includes('-'))) return;\r\n\r\n        const transaction = { ...formData, amount: Number(formData.amount), id: uuidv4()}\r\n        \r\n        addTransaction(transaction);\r\n        setOpen(true);\r\n        setFormData(intialState);\r\n    }\r\n        \r\n    return (\r\n        <Grid container spacing={2}>\r\n            <CustomSnackbar open={open} setOpen={setOpen}/>\r\n            <Grid item xs={12}>\r\n                <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\r\n                    { segment ? segment.words.map(w => w.value).join(' ') : null}\r\n                    </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControl  fullWidth>\r\n                    <InputLabel>Type</InputLabel>\r\n                    <Select value={formData.type} onChange={e => setFormData({...formData, type: e.target.value})}>\r\n                        <MenuItem value=\"Income\">Income</MenuItem>\r\n                        <MenuItem value=\"Expense\">Expense</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Category</InputLabel>\r\n                    <Select value={formData.category} onChange={e => setFormData({...formData, category: e.target.value})}>\r\n                        {categoryExpenses.map(c => <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)} \r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextField fullWidth type=\"number\" label=\"Amount\" value={formData.amount} onChange={e => setFormData({...formData, amount: e.target.value})} />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextField fullWidth type=\"date\" label=\"Date\" value={formData.date} onChange={e => setFormData({...formData, date: formatDate(e.target.value)})} />\r\n            </Grid>\r\n            <Button fullWidth className={classes.button} variant=\"outlined\" color=\"primary\" onClick={createTransaction}>Add Transaction</Button>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\constants\\categories.js",[],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\utils\\formatDate.js",[],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Snackbar\\Snackbar.jsx",[],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Snackbar\\styles.js",[],["97","98"],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\Form\\styles.js",[],"C:\\Users\\ashwi\\OneDrive\\Desktop\\Studies\\Code\\income-expense-tracker-with-speech\\src\\components\\List\\styles.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":27},{"ruleId":"103","severity":1,"message":"107","line":4,"column":10,"nodeType":"105","messageId":"106","endLine":4,"endColumn":35},{"ruleId":"103","severity":1,"message":"108","line":4,"column":37,"nodeType":"105","messageId":"106","endLine":4,"endColumn":53},{"ruleId":"103","severity":1,"message":"109","line":4,"column":55,"nodeType":"105","messageId":"106","endLine":4,"endColumn":65},{"ruleId":"103","severity":1,"message":"110","line":9,"column":10,"nodeType":"105","messageId":"106","endLine":9,"endColumn":31},{"ruleId":"103","severity":1,"message":"111","line":12,"column":9,"nodeType":"105","messageId":"106","endLine":12,"endColumn":20},{"ruleId":"103","severity":1,"message":"112","line":12,"column":22,"nodeType":"105","messageId":"106","endLine":12,"endColumn":29},{"ruleId":"103","severity":1,"message":"113","line":12,"column":31,"nodeType":"105","messageId":"106","endLine":12,"endColumn":46},{"ruleId":"103","severity":1,"message":"114","line":2,"column":119,"nodeType":"105","messageId":"106","endLine":2,"endColumn":123},{"ruleId":"103","severity":1,"message":"115","line":2,"column":90,"nodeType":"105","messageId":"106","endLine":2,"endColumn":94},{"ruleId":"116","severity":1,"message":"117","line":69,"column":8,"nodeType":"118","endLine":69,"endColumn":17,"suggestions":"119"},{"ruleId":"99","replacedBy":"120"},{"ruleId":"101","replacedBy":"121"},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'PushToTalkButtonContainer' is defined but never used.","'PushToTalkButton' is defined but never used.","'ErrorPanel' is defined but never used.","'ExpenseTrackerContext' is defined but never used.","'speechState' is assigned a value but never used.","'segment' is assigned a value but never used.","'toggleRecording' is assigned a value but never used.","'Icon' is defined but never used.","'Menu' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["124"],["122"],["123"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"127","text":"128"},[2985,2994],"[createTransaction, formData, segment]"]